/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package thesis.targets;

import java.awt.GridLayout;
import java.awt.Label;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

/**
 *
 * @author Levent
 */
public final class DependsOfTargets extends javax.swing.JInternalFrame {

    /**
     * Creates new form DependsOfTargets
     */
    public DependsOfTargets() throws JDOMException, IOException {
        initComponents();
        model.clear();
        model2.clear();
        getTargets();
        LstTargets.setModel(model);
        LstDepens.setModel(model2);
    }
    static DefaultListModel model = new DefaultListModel();
    static DefaultListModel model2 = new DefaultListModel();


    public void getTargets() throws JDOMException, IOException {

        LstTargets.setDragEnabled(true);
        LstDepens.setDragEnabled(true);


        // model olusturup JListe ekleme yapiyoruz
        SAXBuilder builder = new SAXBuilder();
        File xmlFile = new File(thesis.FormAna.XmlURL);

        Document document = (Document) builder.build(xmlFile);
        Element rootNode = document.getRootElement();
        List tl = rootNode.getChildren("target");
        Object data[] = new Object[4];


//        String s = "leftx";


        for (int i = 0; i < tl.size(); i++) {
            Element node = (Element) tl.get(i);

            data[0] = node.getAttributeValue("id").toString();
            data[1] = node.getAttributeValue("name").toString();
           
            System.out.println(data[1]);
            model.addElement(data[1]);
            cmbTargets.addItem(data[1]);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        LstTargets = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        LstDepens = new javax.swing.JList();
        cmbTargets = new javax.swing.JComboBox();
        BtnSave = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Depends of Targets");
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        LstTargets.setBorder(javax.swing.BorderFactory.createTitledBorder("Select a Target :"));
        LstTargets.setFont(new java.awt.Font("Tahoma", 0, 13));
        LstTargets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(LstTargets);

        LstDepens.setBorder(javax.swing.BorderFactory.createTitledBorder("Depends"));
        LstDepens.setFont(new java.awt.Font("Tahoma", 0, 13));
        LstDepens.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(LstDepens);

        cmbTargets.setFont(new java.awt.Font("Tahoma", 0, 14));
        cmbTargets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTargetsActionPerformed(evt);
            }
        });

        BtnSave.setText("SAVE");
        BtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSaveActionPerformed(evt);
            }
        });

        btnAdd.setText("<<<<");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText(">>>>");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabel1.setText("Select a Destination Target :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)
                        .addComponent(cmbTargets, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1))
                    .addComponent(cmbTargets, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BtnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTargetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTargetsActionPerformed
        String[] dependsdizi = null;
        System.out.println("LstDepens.getModel().getSize()::: "+ LstDepens.getModel().getSize());
        if (LstDepens.getModel().getSize() > 0) {
                model2.removeAllElements();
                System.out.println("model2 den elemetler kaldırıldı");
            }
        System.out.println("LstDepens.getModel().getSize()::: "+ LstDepens.getModel().getSize());
        try {
            
            SAXBuilder builder = new SAXBuilder();
            File xmlFile = new File(thesis.FormAna.XmlURL);
            Document document = (Document) builder.build(xmlFile);
            Element rootNode = document.getRootElement();
            List TargetLst = rootNode.getChildren("target");

            for (int i = 0; i < TargetLst.size(); i++) {
                Element birtarget = (Element) TargetLst.get(i);
                if (birtarget.getAttributeValue("name").equals(cmbTargets.getSelectedItem().toString())) {
                    if (birtarget.getAttribute("depends")==null) {
                        break;
                    }
                    dependsdizi = birtarget.getAttributeValue("depends").split(",");
                    for (int k = 0; k < dependsdizi.length; k++) {
                        System.out.println(dependsdizi[k]);
                        model2.addElement(dependsdizi[k]);
                    }
                    break;
                }
            }
            

            System.out.println("LstDepens.getModel().getSize()::: "+ LstDepens.getModel().getSize());
        } catch (JDOMException ex) {
            Logger.getLogger(DependsOfTargets.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DependsOfTargets.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbTargetsActionPerformed

    private void BtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSaveActionPerformed
        // TODO add your handling code here:
        System.out.println("LstDepens.getModel().getSize()::: "+ LstDepens.getModel().getSize());
        try {
            // TODO add your handling code here:

            SAXBuilder builder = new SAXBuilder();
            File xmlFile = new File(thesis.FormAna.XmlURL);
            Document document = (Document) builder.build(xmlFile);
            Element rootNode = document.getRootElement();
            List TargetLst = rootNode.getChildren("target");
            int virgulSayac = 0;
            for (int i = 0; i < TargetLst.size(); i++) {
                Element birtarget = (Element) TargetLst.get(i);
                if (birtarget.getAttributeValue("name").equals(cmbTargets.getSelectedItem().toString())) {
                    String dependsbuffer = "";
                    System.out.println("target bulundu");
                    for (int j = 0; j < LstDepens.getModel().getSize(); j++) {
                        System.out.println("LstDepens.getModel().getSize() "+LstDepens.getModel().getSize());
                        if (virgulSayac == 0) {
                            dependsbuffer = dependsbuffer + LstDepens.getModel().getElementAt(j);

                        } else {
                            dependsbuffer = dependsbuffer + "," + LstDepens.getModel().getElementAt(j);

                        }
                        virgulSayac++;
//                        if (virgulSayac != 0) {
//                            dependsbuffer = dependsbuffer + "," + LstDepens.getModel().getElementAt(j);
//                        }
//                        if (virgulSayac == 0) {
//                            dependsbuffer = dependsbuffer + LstDepens.getModel().getElementAt(j) + ",";
//                            virgulSayac++;
//                        }
                    }
                    if (LstDepens.getModel().getSize()==0) {
                        System.out.println("model2 boş bulundu");
                        birtarget.removeAttribute("depends");
                    }else  birtarget.setAttribute("depends", dependsbuffer);
                    
                    // txtAttributeValue1.setText(node.getAttributeValue(cmbAttribute1.getSelectedItem().toString()));
                    
                    break;
                }

                //System.out.println(node.getAttributeValue("id"));
            }
            document.setRootElement(rootNode);
            XMLOutputter xmlOutputter = new XMLOutputter();
            xmlOutputter.output(document, new FileWriter(thesis.FormAna.XmlURL));
            JOptionPane.showMessageDialog(this, "Depends relations are saved");
        } catch (IOException ex) {
            Logger.getLogger(DependsOfTargets.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JDOMException ex) {
            Logger.getLogger(DependsOfTargets.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_BtnSaveActionPerformed

private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
// TODO add your handling code here:
    
    
}//GEN-LAST:event_formInternalFrameOpened

private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
// TODO add your handling code here:
    if (!model2.contains(model.getElementAt(LstTargets.getSelectedIndex()))&&!cmbTargets.getSelectedItem().toString().equals(model.getElementAt(LstTargets.getSelectedIndex()))) {
        model2.addElement(model.getElementAt(LstTargets.getSelectedIndex()));
    }else JOptionPane.showMessageDialog(this, "ALready exist !");
    
    
}//GEN-LAST:event_btnAddActionPerformed

private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
// TODO add your handling code here:
    model2.removeElementAt(LstDepens.getSelectedIndex());
}//GEN-LAST:event_btnRemoveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnSave;
    private javax.swing.JList LstDepens;
    private javax.swing.JList LstTargets;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox cmbTargets;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
